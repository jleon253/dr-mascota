{"version":3,"sources":["components/Formulario.jsx","components/Cita.jsx","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","event","target","name","value","fechaActual","year","Date","getFullYear","month","getMonth","day","getDate","className","role","id","onSubmit","preventDefault","trim","document","getElementById","classList","add","remove","shortid","generate","setTimeout","window","location","href","noValidate","type","placeholder","onChange","required","min","getHours","getMinutes","horaDefault","max","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","idCitaEliminar","citasActuales","filter","tituloCitas","length","map","key","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d73aeb30.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react'\nimport shortid from 'shortid'\nimport PropTypes from 'prop-types'\n\nconst Formulario = ({ crearCita }) => {\n\t// State de citas\n\tconst [cita, actualizarCita] = useState({\n\t\tmascota: '',\n\t\tpropietario: '',\n\t\tfecha: '',\n\t\thora: '',\n\t\tsintomas: '',\n\t})\n\n\tconst [error, actualizarError] = useState(false)\n\n\t// Función ejecutada cuando se teclee en los input's del Form\n\tconst actualizarState = (event) => {\n\t\tactualizarCita({\n\t\t\t...cita, // Ayuda a persistir los demas valores del objeto\n\t\t\t[event.target.name]: event.target.value, // Nombre de la propiedad : Valor ingresado en el input\n\t\t})\n\t}\n\n\t// Extraer valores\n\tconst { mascota, propietario, fecha, hora, sintomas } = cita\n\n\t// Agregar la cita\n\tconst agregarCita = (event) => {\n\t\tevent.preventDefault() // Previene la acción del Submit de JS (Refrescar y enviar por URL los parametros)\n\t\t// Validar\n\t\tif (\n\t\t\tmascota.trim() === '' ||\n\t\t\tpropietario.trim() === '' ||\n\t\t\tfecha.trim() === '' ||\n\t\t\thora.trim() === '' ||\n\t\t\tsintomas.trim() === ''\n\t\t) {\n\t\t\tactualizarError(true)\n\t\t\tdocument.getElementById('myForm').classList.add('was-validated')\n\t\t\treturn\n\t\t}\n\t\tactualizarError(false)\n\t\tdocument.getElementById('myForm').classList.remove('was-validated')\n\t\t//Generar ID\n\t\tcita.id = shortid.generate() // Genera id aleatorio, gracias a 'shortid' (by npm)\n\t\t// Agregar Cita\n\t\tcrearCita(cita)\n\t\t// Reiniciar Form\n\t\tactualizarCita({\n\t\t\tmascota: '',\n\t\t\tpropietario: '',\n\t\t\tfecha: '',\n\t\t\thora: '',\n\t\t\tsintomas: '',\n    })\n    setTimeout(() => {\n      window.location.href = `#${cita.id}`;\n      document.getElementById(`${cita.id}`).classList.add('nuevaCita');\n    }, 200);\n\t}\n\n  const fechaActual = () => {\n    const year = new Date().getFullYear();\n    let month = new Date().getMonth() + 1;\n    let day = new Date().getDate();\n    month = month < 10 ? `0${month}` : month;\n    day = day < 10 ? `0${day}` : day;\n    return `${year}-${month}-${day}`;\n  }\n\n  const horaDefault = () => {\n    if(cita.fecha) {\n      if(cita.fecha === fechaActual()) {\n        return `${new Date().getHours()}:${new Date().getMinutes()}`;\n      } else {\n        return `08:00`;\n      }\n    }\n    return;\n  }\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<h3 className=\"font-weight-bold text-success text-center\">Crea una cita nueva:</h3>\n\t\t\t<hr />\n\t\t\t{error ? (\n\t\t\t\t<div className='alert alert-danger' role='alert'>\n\t\t\t\t\tTodos los campos son obligatorios\n\t\t\t\t</div>\n\t\t\t) : null}\n\t\t\t<form id='myForm' onSubmit={agregarCita} noValidate>\n\t\t\t\t<div className='form-group'>\n\t\t\t\t\t<label>Nombre mascota:</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tname='mascota'\n\t\t\t\t\t\tvalue={mascota}\n\t\t\t\t\t\tclassName='form-control'\n\t\t\t\t\t\tplaceholder='firulais'\n\t\t\t\t\t\tonChange={actualizarState}\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className='form-group'>\n\t\t\t\t\t<label>Nombre propietario:</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tname='propietario'\n\t\t\t\t\t\tvalue={propietario}\n\t\t\t\t\t\tclassName='form-control'\n\t\t\t\t\t\tplaceholder='Jhon Doe'\n\t\t\t\t\t\tonChange={actualizarState}\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className='form-group'>\n\t\t\t\t\t<label>Fecha:</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype='date'\n\t\t\t\t\t\tname='fecha'\n            value={fecha}\n            min={fechaActual()}\n\t\t\t\t\t\tclassName='form-control'\n\t\t\t\t\t\tonChange={actualizarState}\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className='form-group'>\n\t\t\t\t\t<label>Hora:</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype='time'\n\t\t\t\t\t\tname='hora'\n            value={hora}\n            min={horaDefault()}\n            max=\"21:00\"\n\t\t\t\t\t\tclassName='form-control'\n\t\t\t\t\t\tonChange={actualizarState}\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className='form-group'>\n\t\t\t\t\t<label>Sintomas:</label>\n\t\t\t\t\t<textarea\n\t\t\t\t\t\tname='sintomas'\n\t\t\t\t\t\tvalue={sintomas}\n\t\t\t\t\t\tclassName='form-control'\n\t\t\t\t\t\tonChange={actualizarState}\n\t\t\t\t\t\trequired\n\t\t\t\t\t></textarea>\n\t\t\t\t</div>\n\t\t\t\t<button\n\t\t\t\t\ttype='submit'\n\t\t\t\t\tclassName='btn btn-success btn-block text-uppercase font-weight-bold'\n\t\t\t\t>\n\t\t\t\t\tAgrega esta cita\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t</Fragment>\n\t)\n}\n\nFormulario.propTypes = {\n  crearCita: PropTypes.func.isRequired\n}\n\nexport default Formulario\n","import React, {Fragment} from 'react'\nimport PropTypes from 'prop-types'\nimport './Cita.css'\n\nconst Cita = ({ cita, eliminarCita }) => {\n\treturn (\n\t\t<Fragment>\n\t\t\t<div id={ cita.id } className='card mb-2'>\n\t\t\t\t<h5 className='card-header'><b>Mascota:</b> <span className=\"font-weight-normal\">{ cita.mascota }</span></h5>\n\t\t\t\t<div className='card-body'>\n\t\t\t\t\t<p className='card-text'> <b>Fecha:</b> { cita.fecha }</p>\n\t\t\t\t\t<p className='card-text'> <b>Hora:</b> { cita.hora } </p>\n\t\t\t\t\t<p className='card-text'> <b>Propietario:</b> { cita.propietario } </p>\n\t\t\t\t\t<p className='card-text'> <b>Sintomas:</b> { cita.sintomas } </p>\n\t\t\t\t\t<button className='btn btn-danger d-block mx-auto text-uppercase' onClick={() => eliminarCita(cita.id)}>\n\t\t\t\t\t\tQuita esta cita\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Fragment>\n\t)\n}\n\nCita.propTypes = {\n  cita: PropTypes.object.isRequired,\n  eliminarCita: PropTypes.func.isRequired\n}\n\nexport default Cita\n","import React, { Fragment, useState, useEffect } from 'react'\nimport Formulario from './components/Formulario'\nimport Cita from './components/Cita'\nimport './App.css'\n\nfunction App() {\n\tlet citasIniciales = JSON.parse(localStorage.getItem('citas'))\n\tif (!citasIniciales) {\n\t\tcitasIniciales = []\n\t}\n\n\tconst [citas, guardarCitas] = useState(citasIniciales)\n\n\tuseEffect(() => {\n\t\tif (citasIniciales) {\n\t\t\tlocalStorage.setItem('citas', JSON.stringify(citas))\n\t\t} else {\n\t\t\tlocalStorage.setItem('citas', JSON.stringify([]))\n\t\t}\n\t}, [citas, citasIniciales])\n\n\tconst crearCita = (cita) => guardarCitas([cita, ...citas]) // Agregando y teniendo en cuenta los anteriores\n\n\tconst eliminarCita = (idCitaEliminar) => {\n\t\tconst citasActuales = citas.filter((cita) => cita.id !== idCitaEliminar)\n\t\tguardarCitas(citasActuales)\n\t}\n\n\tconst tituloCitas = citas.length === 0 ? 'No tienes citas' : 'Tu lista de citas'\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<nav className='navbar navbar-dark bg-success'>\n\t\t\t\t<span className='navbar-brand mb-0 h1'>\n\t\t\t\t\t<i className='material-icons mr-2'>pets</i>\n\t\t\t\t\tDr. Mascota - Cita médica\n\t\t\t\t</span>\n\t\t\t</nav>\n\t\t\t<div className='container-fluid my-5 px-5'>\n\t\t\t\t<div className='row'>\n\t\t\t\t\t<div className='col-sm-12 col-md-12 col-lg-6 col-xl-6 mb-5'>\n\t\t\t\t\t\t<Formulario crearCita={crearCita} />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='col-sm-12 col-md-12 col-lg-6 col-xl-6 mb-3'>\n\t\t\t\t\t\t<h3 className=\"font-weight-bold text-info text-center\">{tituloCitas}</h3>\n\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t{citas.map((cita) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Cita key={cita.id} cita={cita} eliminarCita={eliminarCita} />\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Fragment>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}